
// First let's define a few basic platforms,
// and a couple of aliases for them, so that
// we don't have to type out their full name
// every time.
#define PLATFORM(WINDOWS_X32);
#define PLATFORM_ALIAS(WINDOWS_X32, WINDOWS_32);
#define PLATFORM_ALIAS(WINDOWS_X32, WIN32);

#define PLATFORM(LINUX_X32);
#define PLATFORM_ALIAS(LINUX_X32, LINUX_32);
#define PLATFORM_ALIAS(LINUX_X32, LINUX32);

#define PLATFORM(MAC_OSX_X32);
#define PLATFORM_ALIAS(MAC_OSX_X32, MAC_OSX_32);
#define PLATFORM_ALIAS(MAC_OSX_X32, MAC32);


// Next we'll define a few tools, and override
// the names for Windows, as executables have
// a suffix of .exe on that platform.
#define TOOL(GCC, ../Tools/bin/i686-elf-gcc);
#define TOOL_WIN32(GCC, ../Tools/bin/i686-elf-gcc.exe);

#define TOOL(AS, ../Tools/bin/i686-elf-as);
#define TOOL_WIN32(AS, ../Tools/bin/i686-elf-as.exe);

#define TOOL(LD, ../Tools/bin/i686-elf-ld);
#define TOOL_WIN32(LD, ../Tools/bin/i686-elf-ld.exe);

#define TOOL(AR, ../Tools/bin/i686-elf-ar);
#define TOOL_WIN32(AR, ../Tools/bin/i686-elf-ar.exe);

#define TOOL(OBJDUMP, ../Tools/bin/i686-elf-objdump);
#define TOOL_WIN32(OBJDUMP, ../Tools/bin/i686-elf-objdump.exe);

// Just to make things easier for us, we'll
// define a few constants, in this case, they're
// for the GCC arguments, and, just because it's
// an example, we'll change this constant only
// on the Windows platform.
#define CONST(GCC_ARGS, -g -Wall -Werror -o=);
#define CONST_WIN32(GCC_ARGS, -g -Wall -Werror -Win32 -o=);

#define CONST(LD_ARGS, -Wall -Werror -o=);

//#define DEPENDANCY(KERNEL_C_DEPENDANCIES)
//{
//    Include/Kernel.h
//    Include/Hardware/PCIBus.h
//}

// We could always just execute the tools directly,
// which there is an example of, commented out, at
// the bottom of this file, but we're using this
// method as it is much more powerful for working with 
// collections of source files.
//#define SOURCE(GCC_C_FILES)
//{
//    Kernel.c : $(KERNEL_C_DEPENDANCIES)
//    KernelFile2.c : Include/Kernel.h, Include/KernelFile2.h
//    KernelFile3.c : $(KERNEL_C_DEPENDANCIES), Include/KernelFile3.h
//    Kernel/Hardware/PCIBus.c : Include/Harware/PCIBus.h, $(KERNEL_C_DEPENDANCIES)
//}
#define SOURCE(GCC_C_FILES)
{
#
#   This isn't really the best example of dependancies
#   because your normally only dependant on header files,
#   not on actual source files.
#
#   Also, as a note, # is a comment in a source block.
#
    Kernel.c : KernelFile2.c, KernelFile3.c
#
#   I would cincerely hope you don't actually need to use 
#   circular dependancies (especially not dependant on itself),
#   but, either way, they do get resolved (Mind you, I didn't 
#   really expect it to be able to do this kind of resolution,
#   but it apparently handles this just fine)
#
    KernelFile2.c : KernelFile3.c
    KernelFile3.c : KernelFile2.c, KernelFile3.c
    Kernel/Hardware/PCIBus.c
}

// Originally here to test custom manglers,
// it is kept here to show how to define your
// own custom mangler.
//#define MANGLER(C#, IT_WORKS, inString)
//{
//    return "Huzzah! It works! Btw, the input string was '" + inString + "'.";
//}

directory TRY_DELETE(TestDir1);
directory TRY_DELETE(TestDir2);

directory CREATE(TestDir1);
file CREATE_OR_TRUNCATE(TestDir1/TestFile1.txt)
{
    Well, creating with trimming enabled works just fine.
    Also, LD_ARGS is '${LD_ARGS}'
}
directory COPY(TestDir1, TestDir2);

file APPEND(TestDir2/TestFile1.txt)
{
    Well, this means the appending with trimming enabled works just fine.
}

// Some people can't do a thing without targets,
// So we'll show how to do this.
// (yes, I know you MAKE junkies love your clean
// targets, but we already provide built-in functions
// to do that cleanup)
// The only real, valid reason for targets, is 
// lay-man's configuration via multi-targeting.
#define TARGET(all)
{
    //common MANGLER(GCC_C_FILES_MANGLER)
    //{
    //    #prefix{./Object/MainKernel/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : FILENAME(Kernel.c)
    //    #prefix{./Object/KernelFiles/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : REGEX(KernelFile.+)
    //    #prefix{./Object/Hardware/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : WILDCARD(Kernel/Hardware/*)
    //}
    
    
    // Rather than having to explicitly execute gcc 
    // on every file, we can just use this statement
    // to execute GCC with the arguments in the GCC_ARGS
    // constant, followed by each file in the GCC_C_FILES
    // source collection, prefixed by the expression
    // that we add before each file.
    common TOOL(GCC ${GCC_ARGS}) : GCC_C_FILES
    {
        #prefix{./Object/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : FILENAME(Kernel.c)
        #prefix{./Object/KernelFiles/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : REGEX(KernelFile.+)
        #prefix{./Object/Hardware/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : WILDCARD(Kernel/Hardware/*)
    }
    
    // Now we get to link everything together.
    // Be glad it's this simple, it was a pain to get
    // this to process correctly. :P
    LD ${LD_ARGS}./Linked.lib ${./Object/&([GCC_C_FILES].NO_EXTENSION.DIR_TO_FILENAME).o}
    
}
// This actually won't do what we want, but it's left
// here to demonstrate how you can use the #filename 
// property.
//common TOOL(LD ${LD_ARGS}) : GCC_C_FILES
//{
//    #filename{./Object/$(FILENAME.NO_EXTENSION.DIR_TO_FILENAME).o} : ALL
//}
// 
// The following just remains as an example of how you 
// can explicitly call a tool.
//
//GCC ${GCC_ARGS}./Object/Kernel.o Kernel.c
//GCC ${GCC_ARGS}./Object/KernelFile2.o KernelFile2.c
//GCC ${GCC_ARGS}./Object/KernelFile3.o KernelFile3.c
// 
// 
// And finally these lines are only here for testing
// ${ TEST}
// ${TEST }
// ${ TEST }
// ${	TEST}
// ${TEST	}
// ${	TEST	}
// $	{ TEST}
// $	{TEST }
// $	{ TEST }
// $	{	TEST}
// $	{TEST	}
// $	{	TEST	}
// $ { TEST}
// $ {TEST }
// $ { TEST }
// $ {	TEST}
// $ {TEST	}
// $ {	TEST	}