<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="~error" xml:space="preserve">
    <value>Error</value>
    <comment>The Error manager needs to know how to say 'Error'. The reason it has the '~' in front of it is so that it is at the top of this list.</comment>
  </data>
  <data name="00001" xml:space="preserve">
    <value>Syntax error in declaration of platform alias!</value>
  </data>
  <data name="00003" xml:space="preserve">
    <value>Syntax error in declaration of platform! Expected '('!</value>
  </data>
  <data name="00004" xml:space="preserve">
    <value>Syntax error in declaration of platform! Expected ');'!</value>
  </data>
  <data name="00008" xml:space="preserve">
    <value>Syntax error in declaration of global tool! Expected '('!</value>
  </data>
  <data name="00009" xml:space="preserve">
    <value>Unknown Platform '{0}'! Perhaps it hasn't been declared yet?</value>
  </data>
  <data name="00010" xml:space="preserve">
    <value>Syntax error in declaration of platform specific tool! Expected '('!</value>
  </data>
  <data name="00012" xml:space="preserve">
    <value>Syntax error in declaration of platform specific constant! Expected '('!</value>
  </data>
  <data name="00014" xml:space="preserve">
    <value>Syntax error in declaration of global constant! Expected '('!</value>
  </data>
  <data name="00016" xml:space="preserve">
    <value>Unknown #define '{0}'!</value>
  </data>
  <data name="00017" xml:space="preserve">
    <value>Syntax error in declaration of source block! Expected '('!</value>
  </data>
  <data name="00018" xml:space="preserve">
    <value>Syntax error in declaration of source block! Expected ')'!</value>
  </data>
  <data name="00019" xml:space="preserve">
    <value>Syntax error in declaration of Source block! Expected '{' got '{0}'! Opening bracket must be on the imediate next line after the start of a source block, and must be alone on their line. (whitespace is allowed)</value>
  </data>
  <data name="00020" xml:space="preserve">
    <value>Unexpected end of file while declaring source block!</value>
  </data>
  <data name="00021" xml:space="preserve">
    <value>Syntax error in declaration of Common Tool! Expected '{' got '{0}'! Opening bracket must be on the imediate next line after the start of a common tool block, and must be alone on their line. (whitespace is allowed)</value>
  </data>
  <data name="00022" xml:space="preserve">
    <value>Unexpected end of file when declaring a common tool block!</value>
  </data>
  <data name="00023" xml:space="preserve">
    <value>Unknown expression in a common tool block '{0}'!</value>
  </data>
  <data name="00024" xml:space="preserve">
    <value>While declaring a common tool block. Unknown list '{0}'! Perhaps it hasn't been declared yet?</value>
  </data>
  <data name="00025" xml:space="preserve">
    <value>While declaring a common tool block. Expected ':' Got '{0}'!</value>
  </data>
  <data name="00026" xml:space="preserve">
    <value>While declaring a common tool block. Expected '(' Got '{0}'!</value>
  </data>
  <data name="00027" xml:space="preserve">
    <value>Unknown 'common' type: '{0}'!</value>
  </data>
  <data name="00028" xml:space="preserve">
    <value>Syntax error while declaring prefix! Expected '{' Got '{0}'!</value>
  </data>
  <data name="00029" xml:space="preserve">
    <value>Unknown condition for prefix '{0}'!</value>
  </data>
  <data name="00030" xml:space="preserve">
    <value>Syntax error in filename condition! Expected: ')' Got: '{0}'!</value>
  </data>
  <data name="00031" xml:space="preserve">
    <value>Syntax error in filename condition! Expected: '(' Got: '{0}'!</value>
  </data>
  <data name="00032" xml:space="preserve">
    <value>Syntax error in wildcard condition! Expected: ')' Got: '{0}'!</value>
  </data>
  <data name="00033" xml:space="preserve">
    <value>Syntax error in wildcard condition! Expected: '(' Got: '{0}'!</value>
  </data>
  <data name="00034" xml:space="preserve">
    <value>Syntax error in regex condition! Expected: ')' Got: '{0}'!</value>
  </data>
  <data name="00035" xml:space="preserve">
    <value>Syntax error in wildcard condition! Expected: '(' Got: '{0}'!</value>
  </data>
  <data name="00036" xml:space="preserve">
    <value>Syntax error while declaring filename! Expected '{' Got '{0}'!</value>
  </data>
  <data name="00037" xml:space="preserve">
    <value>Unknown condition for filename '{0}'!</value>
  </data>
  <data name="00038" xml:space="preserve">
    <value>Unknown condition for suffix '{0}'!</value>
  </data>
  <data name="00039" xml:space="preserve">
    <value>Syntax error while declaring suffix! Expected '{' Got '{0}'!</value>
  </data>
  <data name="00040" xml:space="preserve">
    <value>Unknown mangler '{0}'!</value>
  </data>
  <data name="00041" xml:space="preserve">
    <value>Unknown built-in constant '{0}'!</value>
  </data>
  <data name="00042" xml:space="preserve">
    <value>Unable to find a compiler for '{0}'!</value>
  </data>
  <data name="00043" xml:space="preserve">
    <value>An error ocurred when compiling a custom name mangler! The compiler returned '{0}'! Output:
{1}</value>
  </data>
  <data name="00044" xml:space="preserve">
    <value>Syntax error while declaring custom mangler! Expected '(' Got '{0}'!</value>
  </data>
  <data name="00045" xml:space="preserve">
    <value>Syntax error while declaring custom mangler! Expected ')' Got '{0}'!</value>
  </data>
  <data name="00046" xml:space="preserve">
    <value>While compiling custom mangler: Templates for '{0}' could not be found!</value>
  </data>
  <data name="00049" xml:space="preserve">
    <value>Unknown language '{0}'! Cannot read custom mangler!</value>
  </data>
  <data name="00050" xml:space="preserve">
    <value>Unexpected end of file while reading custom CSharp mangler block!</value>
  </data>
  <data name="00051" xml:space="preserve">
    <value>Syntax error while declaring custom mangler block! Expected '{' Got '{0}'! The opening and closing blocks of a mangler must be alone on the line, whitespaces are allowed.</value>
  </data>
  <data name="00053" xml:space="preserve">
    <value>Process exited with exit code '{0}'! Stopping.</value>
  </data>
  <data name="00054" xml:space="preserve">
    <value>Errors were encountered, execution will not continue.</value>
  </data>
  <data name="00055" xml:space="preserve">
    <value>Something went wrong internally! A constant was requested for a platform that doesn't exist! Requested '{0}' for platform '{1}'. Resolved platform is '{2}'.</value>
  </data>
  <data name="00056" xml:space="preserve">
    <value>Something went wrong internally! A tool was requested for a platform that doesn't exist! Requested '{0}' for platform '{1}'. Resolved platform is '{2}'.</value>
  </data>
  <data name="00057" xml:space="preserve">
    <value>Syntax error while declaring a target. Expected '('!</value>
  </data>
  <data name="00058" xml:space="preserve">
    <value>Syntax error while declaring a target. Expected ')'!</value>
  </data>
  <data name="00059" xml:space="preserve">
    <value>Re-definition of target '{0}'! Cannot continue!</value>
  </data>
  <data name="00060" xml:space="preserve">
    <value>Syntax error while declaring a target. Expected '{' Got '{0}'! Remember, opening and closing brackets must be on their own line.</value>
  </data>
  <data name="00061" xml:space="preserve">
    <value>Unexpected end of file while declaring a target block!</value>
  </data>
  <data name="00063" xml:space="preserve">
    <value>Unknown #define in target block '{0}'!</value>
  </data>
  <data name="00064" xml:space="preserve">
    <value>Unknown Platform ('{0}') when defining platform specific constant for target '{1}'.</value>
  </data>
  <data name="00065" xml:space="preserve">
    <value>Syntax error when declaring platform specific constant! Expected '('!</value>
  </data>
  <data name="00066" xml:space="preserve">
    <value>Syntax error when declaring constant in target '{0}'! Expected '('!</value>
  </data>
  <data name="00068" xml:space="preserve">
    <value>Syntax error when declaring target source list! Expected '('!</value>
  </data>
  <data name="00069" xml:space="preserve">
    <value>Syntex error when declaring target source list! Expected ')'!</value>
  </data>
  <data name="00070" xml:space="preserve">
    <value>Syntax error when declaring target source list! Expected '{' Got '{0}'! Remember, the opening and closing brackets must be on their own line.</value>
  </data>
  <data name="00071" xml:space="preserve">
    <value>Unexpected end of file while declaring target source list!</value>
  </data>
  <data name="00072" xml:space="preserve">
    <value>Unknown platform ('{0}') while declaring target platform specific tool! </value>
  </data>
  <data name="00073" xml:space="preserve">
    <value>Syntax error while declaring target platform specific tool! Expected '('</value>
  </data>
  <data name="00075" xml:space="preserve">
    <value>Syntax error while declaring target tool! Expected '('</value>
  </data>
  <data name="00077" xml:space="preserve">
    <value>Syntax error while declaring platform alias! Expected '('</value>
  </data>
  <data name="00079" xml:space="preserve">
    <value>Syntax error while declaring target platform! Expected '('</value>
  </data>
  <data name="00080" xml:space="preserve">
    <value>Syntax error while declaring target platform! Expected ');' Got '{0}'!</value>
  </data>
  <data name="00082" xml:space="preserve">
    <value>Unknown common declaration '{0}'!</value>
  </data>
  <data name="00083" xml:space="preserve">
    <value>Unknown list '{0}'!</value>
  </data>
  <data name="00084" xml:space="preserve">
    <value>While declaring a target common tool block. Expected ':' Got '{0}'!</value>
  </data>
  <data name="00085" xml:space="preserve">
    <value>While declaring a target common tool block. Expected '(' Got '{0}'!</value>
  </data>
  <data name="00086" xml:space="preserve">
    <value>Syntax error in declaration of target Common Tool! Expected '{' got '{0}'! Opening bracket must be on the imediate next line after the start of a common tool block, and must be alone on their line. (whitespace is allowed)</value>
  </data>
  <data name="00087" xml:space="preserve">
    <value>Unexpected end of file when declaring a target common tool block!</value>
  </data>
  <data name="00088" xml:space="preserve">
    <value>Unknown expression in a target common tool block '{0}'!</value>
  </data>
  <data name="00090" xml:space="preserve">
    <value>Cache file version is newer than is supported! Max version supported is '{0}' cache file version is '{1}'.</value>
  </data>
  <data name="00094" xml:space="preserve">
    <value>File already exists! '{0}'</value>
  </data>
  <data name="00095" xml:space="preserve">
    <value>File doesn't exist! '{0}'</value>
  </data>
  <data name="00096" xml:space="preserve">
    <value>Syntax error while declaring file statement! Expected '{0}'!</value>
  </data>
  <data name="00097" xml:space="preserve">
    <value>Unknown file statement type '{0}'!</value>
  </data>
  <data name="00098" xml:space="preserve">
    <value>Syntax error while declaring file statement! Expected '{0}' Got '{1}'!</value>
  </data>
  <data name="00099" xml:space="preserve">
    <value>Unexpected end of file while declaring file statement!</value>
  </data>
  <data name="00100" xml:space="preserve">
    <value>Unknown Create statement type '{0}'!</value>
  </data>
  <data name="00101" xml:space="preserve">
    <value>Unknown Try statement type '{0}'!</value>
  </data>
  <data name="00102" xml:space="preserve">
    <value>Unknown Force statement type '{0}'!</value>
  </data>
  <data name="00103" xml:space="preserve">
    <value>Directory '{0}' already exists!</value>
  </data>
  <data name="00104" xml:space="preserve">
    <value>Cannot delete directory '{0}' because it doesn't exist!</value>
  </data>
  <data name="00105" xml:space="preserve">
    <value>Source directory '{0}' does not exist!</value>
  </data>
  <data name="00106" xml:space="preserve">
    <value>Unknown directory statement type '{0}'!</value>
  </data>
  <data name="00107" xml:space="preserve">
    <value>Syntax error while declaring directory statement! Expected '{0}'!</value>
  </data>
  <data name="00108" xml:space="preserve">
    <value>An exception was thrown while trying to execute the statement '{0}'! Exception message: '{1}'</value>
  </data>
</root>